{"version":3,"sources":["shared/elements.ts","components/Header.tsx","components/Paragraph.tsx","components/List.tsx","components/Delimiter.tsx","components/Image.tsx","components/Quote.tsx","components/Embed.tsx","components/Code.tsx","components/Table.tsx","components/ElementBuilder.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["elements","Header","props","element","data","level","text","Paragraph","List","style","items","map","item","index","key","Delimiter","className","Image","src","url","alt","caption","Quote","Embed","service","width","height","embed","frameBorder","allow","allowFullScreen","title","Code","code","Table","content","cell","ElementBuilder","type","role","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.29e97bee.chunk.js","sourcesContent":["import { Element } from './IElement';\r\n// import axios from 'axios';\r\n\r\n// axios.get(`https://jsoncontent.com/api`)\r\n//     .then(res => {\r\n//         console.log(res.data);\r\n//     })\r\n\r\nexport const elements: Element[] = [{\"type\":\"header\",\"data\":{\"text\":\"This is a demo post\",\"level\":1}},{\"type\":\"paragraph\",\"data\":{\"text\":\"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Minima nulla nesciunt dolor aliquid repudiandae repellendus. Dolore eveniet, quisquam eius. Necessitatibus hic ut magni ea accusantium earum temporibus consectetur quas corporis asperiores aliquid esse dolorem molestiae repellat voluptatibus placeat quo nostrum, aspernatur commodi iure dolorum quos quam. Dolore odit corporis aperiam, exercitationem recusandae sit facilis veritatis unde ab quae, perferendis voluptatem, cupiditate quas deleniti aut temporibus sequi esse, fuga cumque commodi rerum nobis earum sint. Molestias qui enim harum animi numquam ullam aspernatur quia accusamus, impedit iure excepturi culpa aliquam veritatis unde, reiciendis repellat assumenda. Provident doloribus assumenda, sequi quidem repudiandae.\"}},{\"type\":\"quote\",\"data\":{\"text\":\"Be the change that you wish to see in the world.\",\"caption\":\"Mahatma Gandhi\",\"alignment\":\"left\"}},{\"type\":\"image\",\"data\":{\"url\":\"https://picsum.photos/800/500\",\"caption\":\"Picsum Photo\",\"withBorder\":false,\"withBackground\":false,\"stretched\":false}},{\"type\":\"paragraph\",\"data\":{\"text\":\"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Minima nulla nesciunt dolor aliquid repudiandae repellendus. Dolore eveniet, quisquam eius. Necessitatibus hic ut magni ea accusantium earum temporibus consectetur quas corporis asperiores aliquid esse dolorem molestiae repellat voluptatibus placeat quo nostrum, aspernatur commodi iure dolorum quos quam. Dolore odit corporis aperiam, exercitationem recusandae sit facilis veritatis unde ab quae, perferendis voluptatem, cupiditate quas deleniti aut temporibus sequi esse, fuga cumque commodi rerum nobis earum sint. Molestias qui enim harum animi numquam ullam aspernatur quia accusamus, impedit iure excepturi culpa aliquam veritatis unde, reiciendis repellat assumenda. Provident doloribus assumenda, sequi quidem repudiandae.\"}},{\"type\":\"embed\",\"data\":{\"service\":\"youtube\",\"source\":\"https://www.youtube.com/watch?v=n0JTta67aUE\",\"embed\":\"https://www.youtube.com/embed/n0JTta67aUE\",\"width\":580,\"height\":320,\"caption\":\"Spitting Image Official Trailer | There's Something Funny About These People\"}},{\"type\":\"header\",\"data\":{\"text\":\"This is a Heading 2\",\"level\":2}},{\"type\":\"paragraph\",\"data\":{\"text\":\"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Minima nulla nesciunt dolor aliquid repudiandae repellendus. Dolore eveniet, quisquam eius. Necessitatibus hic ut magni ea accusantium earum temporibus consectetur quas corporis asperiores aliquid esse dolorem molestiae repellat voluptatibus placeat quo nostrum, aspernatur commodi iure dolorum quos quam. Dolore odit corporis aperiam, exercitationem recusandae sit facilis veritatis unde ab quae, perferendis voluptatem, cupiditate quas deleniti aut temporibus sequi esse, fuga cumque commodi rerum nobis earum sint. Molestias qui enim harum animi numquam ullam aspernatur quia accusamus, impedit iure excepturi culpa aliquam veritatis unde, reiciendis repellat assumenda. Provident doloribus assumenda, sequi quidem repudiandae.\"}},{\"type\":\"delimiter\",\"data\":{}},{\"type\":\"code\",\"data\":{\"code\":\"function array_group_by(array $arr, $key) : array {\\n    if (!is_string($key) && !is_int($key) && !is_float($key) && !is_callable($key)) {\\n        trigger_error('array_group_by(): The key should be a string, an integer, a float, or a function', E_USER_ERROR);\\n    }\\n    $isFunction = !is_string($key) && is_callable($key);\\n    // Load the new array, splitting by the target key\\n    $grouped = [];\\n    foreach ($arr as $value) {\\n        $groupKey = null;\\n        if ($isFunction) {\\n            $groupKey = $key($value);\\n        } else if (is_object($value)) {\\n            $groupKey = $value->{$key};\\n        } else {\\n            $groupKey = $value[$key];\\n        }\\n        $grouped[$groupKey][] = $value;\\n    }\\n    // Recursively build a nested grouping if more parameters are supplied\\n    // Each grouped array value is grouped according to the next sequential key\\n    if (func_num_args() > 2) {\\n        $args = func_get_args();\\n        foreach ($grouped as $groupKey => $value) {\\n            $params = array_merge([$value], array_slice($args, 2, func_num_args()));\\n            $grouped[$groupKey] = call_user_func_array('array_group_by', $params);\\n        }\\n    }\\n    return $grouped;\\n}\"}},{\"type\":\"table\",\"data\":{\"content\":[[\"Heading 1\",\"Heading 2\"],[\"Sales 100\",\"Sales 200\"],[\"Sales 300\",\"Sales 400\"],[\"Sales 500\",\"Sales 600\"]]}}];","import React from 'react'\r\nimport { IHeader } from '../shared/IElement'\r\n\r\ninterface IProps {\r\n    readonly element: IHeader; \r\n}\r\n\r\nexport default function Header(props: IProps): JSX.Element {\r\n\r\n  const element = props.element;\r\n\r\n    switch (element.data.level) {\r\n        case 1:\r\n            return <h1>{element.data.text}</h1>;\r\n        case 2:\r\n            return <h2>{element.data.text}</h2>;\r\n        case 3:\r\n            return <h3>{element.data.text}</h3>;\r\n        case 4:\r\n            return <h4>{element.data.text}</h4>;\r\n        case 5:\r\n            return <h5>{element.data.text}</h5>;\r\n        case 6:\r\n            return <h6>{element.data.text}</h6>;            \r\n        default:\r\n            return <p>{element.data.text}</p>;\r\n    }\r\n\r\n}\r\n","import React from 'react'\r\nimport { IParagraph } from '../shared/IElement'\r\n\r\ninterface IProps {\r\n    readonly element: IParagraph; \r\n}\r\n\r\nexport default function Paragraph(props: IProps): JSX.Element {\r\n\r\n  const element = props.element;\r\n\r\n  return (\r\n    <p>{element.data.text}</p>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { IList } from '../shared/IElement'\r\n\r\ninterface IProps {\r\n    readonly element: IList; \r\n}\r\n\r\nexport default function List(props: IProps): JSX.Element {\r\n\r\n    const element = props.element;\r\n\r\n    switch (element.data.style) {\r\n        case \"ordered\":\r\n            return <ol>\r\n                {element.data.items.map((item, index) =>\r\n                 <li key={index}>{item}</li>\r\n                )}\r\n                </ol>;\r\n        case \"unordered\":\r\n            return <ul>\r\n                {element.data.items.map((item, index) =>\r\n                 <li key={index}>{item}</li>\r\n                )}\r\n                </ul>; \r\n        default:\r\n            return <ol></ol>;\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { IDelimiter } from '../shared/IElement'\r\n\r\ninterface IProps {\r\n    readonly element: IDelimiter; \r\n}\r\n\r\nexport default function Delimiter(props: IProps): JSX.Element {\r\n\r\n  return (\r\n    <p className=\"text-center\">**************</p>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { IImage } from '../shared/IElement'\r\n\r\ninterface IProps {\r\n    readonly element: IImage; \r\n}\r\n\r\nexport default function Image(props: IProps): JSX.Element {\r\n\r\n  const element = props.element;\r\n\r\n  return (\r\n    <><img src={element.data.url} alt={element.data.caption} />\r\n      <div className=\"img-caption\">{element.data.caption}</div></>\r\n    \r\n  )\r\n}\r\n","import React from 'react'\r\nimport { IQuote } from '../shared/IElement'\r\n\r\ninterface IProps {\r\n    readonly element: IQuote; \r\n}\r\n\r\nexport default function Quote(props: IProps): JSX.Element {\r\n\r\n  const element = props.element;\r\n\r\n  return (\r\n      <blockquote className=\"blockquote\">\r\n        {element.data.text}\r\n        <span>{element.data.caption}</span>\r\n      \r\n      </blockquote>\r\n    \r\n  )\r\n}","import React from 'react'\r\nimport { IEmbed } from '../shared/IElement'\r\n\r\ninterface IProps {\r\n    readonly element: IEmbed; \r\n}\r\n\r\nexport default function Embed(props: IProps): JSX.Element {\r\n\r\n  const element = props.element;\r\n\r\n  switch (element.data.service) {\r\n    case 'youtube':\r\n      \r\n      return (\r\n        <div className=\"youtube-video\">\r\n          <iframe width={element.data.width} height={element.data.height} src={element.data.embed} frameBorder=\"0\" allow=\"autoplay; encrypted-media\" allowFullScreen title={element.data.caption}></iframe>\r\n        </div>\r\n      )\r\n  \r\n    default:\r\n      return <p>Service not supported yet!</p>\r\n  }\r\n  \r\n}","import React from 'react';\r\nimport { ICode } from '../shared/IElement';\r\n\r\ninterface IProps {\r\n    readonly element: ICode; \r\n}\r\n\r\nexport default function Code(props: IProps): JSX.Element {\r\n\r\n  const element = props.element;\r\n\r\n  return (\r\n    <>\r\n    <pre><code>{element.data.code}</code></pre>\r\n    </>\r\n    \r\n  )\r\n}","import React from 'react'\r\nimport { ITable } from '../shared/IElement'\r\n\r\ninterface IProps {\r\n    readonly element: ITable; \r\n}\r\n\r\nexport default function Table(props: IProps): JSX.Element {\r\n\r\n  const element = props.element;\r\n\r\n  return (\r\n    <>\r\n    <table>\r\n        {element.data.content.map((item, index) =>\r\n            <tr>\r\n              {item.map( ( cell )=> {\r\n                return <td>{cell}</td>\r\n              })}\r\n          </tr>\r\n        )}\r\n    </table>\r\n    </>\r\n    \r\n  )\r\n}","import React from 'react'\r\nimport { Element } from '../shared/IElement';\r\nimport Header from './Header';\r\nimport Paragraph from './Paragraph';\r\nimport List from './List';\r\nimport Delimiter from './Delimiter';\r\nimport Image from './Image';\r\nimport Quote from './Quote';\r\nimport Embed from './Embed';\r\nimport Code from './Code';\r\nimport Table from './Table';\r\n\r\ninterface IProps {\r\n    readonly element: Element;\r\n}\r\n\r\nexport default function ElementBuilder(props: IProps): JSX.Element {\r\n    const element = props.element;\r\n\r\n    switch (element.type) {\r\n      case \"paragraph\":\r\n        return <Paragraph element={element}/>\r\n      case \"header\":\r\n        return <Header element={element}/>   \r\n      case \"delimiter\":\r\n        return <Delimiter element={element}/>\r\n      case \"image\":\r\n        return <Image element={element}/>\r\n      case \"list\":\r\n        return <List element={element}/>\r\n      case \"quote\":\r\n        return <Quote element={element}/>\r\n      case \"embed\":\r\n        return <Embed element={element}/>         \r\n      case \"code\":\r\n        return <Code element={element}/>\r\n      case \"table\":\r\n        return <Table element={element}/>        \r\n\r\n      default:\r\n      return <div className=\"alert alert-warning\" role=\"alert\">\r\n                Unknown Element!\r\n            </div>\r\n\r\n    }\r\n\r\n}\r\n","import React from 'react';\r\nimport {elements} from './shared/elements'\r\nimport ElementBuilder from './components/ElementBuilder'\r\n\r\n/**\r\n * App JSX\r\n */\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <>\r\n        <header>\r\n            <img className=\"app-logo\" src=\"parser.jpg\" alt=\"Logo\"/>\r\n        </header>\r\n        <div className=\"container pt-2 pb-2\">          \r\n            <div className=\"page\">\r\n                {elements.map((element, index) =>\r\n                    <ElementBuilder key={index} element={element}/>\r\n                )}\r\n            </div>         \r\n\r\n        </div>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}