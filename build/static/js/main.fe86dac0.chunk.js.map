{"version":3,"sources":["shared/elements.ts","components/Header.tsx","components/Paragraph.tsx","components/List.tsx","components/Delimiter.tsx","components/Image.tsx","components/ElementBuilder.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["elements","Header","props","element","data","level","text","Paragraph","List","style","items","map","item","index","Delimiter","className","Image","src","file","url","alt","caption","ElementBuilder","type","role","App","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yMAEaA,G,KAAsB,CAC/B,CACI,KAAS,SACT,KAAS,CACL,KAAS,YACT,MAAU,IAGlB,CACI,KAAS,YACT,KAAS,CACL,KAAS,kGAGjB,CACI,KAAS,SACT,KAAS,CACL,KAAS,eACT,MAAU,IAGlB,CACI,KAAS,OACT,KAAS,CACL,MAAU,YACV,MAAU,CACN,8BACA,uCACA,+DAIZ,CACI,KAAS,SACT,KAAS,CACL,KAAS,gDACT,MAAU,IAGlB,CACI,KAAS,YACT,KAAS,CACL,KAAS,4XAGjB,CACI,KAAS,YACT,KAAS,CACL,KAAS,qTAGjB,CACI,KAAS,SACT,KAAS,CACL,KAAS,sCACT,MAAU,IAGlB,CACI,KAAS,YACT,KAAS,CACL,KAAS,wMAGjB,CACI,KAAS,YACT,KAAS,CACL,KAAS,gXAGjB,CACI,KAAS,YACT,KAAS,CACL,KAAS,2EAGjB,CACI,KAAS,YACT,KAAS,IAEb,CACI,KAAS,YACT,KAAS,CACL,KAAS,0SAGjB,CACI,KAAS,QACT,KAAS,CACL,KAAS,CACL,IAAQ,wDAEZ,QAAY,GACZ,YAAe,EACf,WAAc,EACd,gBAAmB,MC1FhB,SAASC,EAAOC,GAE7B,IAAMC,EAAUD,EAAMC,QAEpB,OAAQA,EAAQC,KAAKC,OACjB,KAAK,EACD,OAAO,4BAAKF,EAAQC,KAAKE,MAC7B,KAAK,EACD,OAAO,4BAAKH,EAAQC,KAAKE,MAC7B,KAAK,EACD,OAAO,4BAAKH,EAAQC,KAAKE,MAC7B,KAAK,EACD,OAAO,4BAAKH,EAAQC,KAAKE,MAC7B,KAAK,EACD,OAAO,4BAAKH,EAAQC,KAAKE,MAC7B,KAAK,EACD,OAAO,4BAAKH,EAAQC,KAAKE,MAC7B,QACI,OAAO,2BAAIH,EAAQC,KAAKE,OClBrB,SAASC,EAAUL,GAEhC,IAAMC,EAAUD,EAAMC,QAEtB,OACE,2BAAIA,EAAQC,KAAKE,MCLN,SAASE,EAAKN,GAEzB,IAAMC,EAAUD,EAAMC,QAEtB,OAAQA,EAAQC,KAAKK,OACjB,IAAK,UACD,OAAO,4BACFN,EAAQC,KAAKM,MAAMC,KAAI,SAACC,EAAMC,GAAP,OACvB,4BAAKD,OAGd,IAAK,YACD,OAAO,4BACFT,EAAQC,KAAKM,MAAMC,KAAI,SAACC,EAAMC,GAAP,OACvB,4BAAKD,OAGd,QACI,OAAO,8BClBJ,SAASE,EAAUZ,GAEhC,OACE,uBAAGa,UAAU,eAAb,kBCHW,SAASC,EAAMd,GAE5B,IAAMC,EAAUD,EAAMC,QAEtB,OACE,yBAAKc,IAAKd,EAAQC,KAAKc,KAAKC,IAAKC,IAAKjB,EAAQC,KAAKiB,UCAxC,SAASC,EAAepB,GACnC,IAAMC,EAAUD,EAAMC,QAEtB,OAAQA,EAAQoB,MACd,IAAK,YACH,OAAO,kBAAChB,EAAD,CAAWJ,QAASA,IAC7B,IAAK,SACH,OAAO,kBAACF,EAAD,CAAQE,QAASA,IAC1B,IAAK,YACH,OAAO,kBAACW,EAAD,CAAWX,QAASA,IAC7B,IAAK,QACH,OAAO,kBAACa,EAAD,CAAOb,QAASA,IACzB,IAAK,OACH,OAAO,kBAACK,EAAD,CAAML,QAASA,IAExB,QACA,OAAO,yBAAKY,UAAU,sBAAsBS,KAAK,SAA1C,qBCAEC,MApBf,WAEI,OACI,oCACA,gCACI,yBAAKV,UAAU,WAAWE,IAAI,aAAaG,IAAI,UAEnD,yBAAKL,UAAU,uBACX,yBAAKA,UAAU,QACVf,EAASW,KAAI,SAACR,EAASU,GAAV,OACV,kBAACS,EAAD,CAAgBI,IAAKb,EAAOV,QAASA,WCNrCwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fe86dac0.chunk.js","sourcesContent":["import { Element } from './IElement';\r\n\r\nexport const elements: Element[] = [\r\n    {\r\n        \"type\" : \"header\",\r\n        \"data\" : {\r\n            \"text\" : \"Editor.js\",\r\n            \"level\" : 2\r\n        }\r\n    },\r\n    {\r\n        \"type\" : \"paragraph\",\r\n        \"data\" : {\r\n            \"text\" : \"Hey. Meet the new Editor. On this page you can see it in action ‚Äî try to edit this text.\"\r\n        }\r\n    },\r\n    {\r\n        \"type\" : \"header\",\r\n        \"data\" : {\r\n            \"text\" : \"Key features\",\r\n            \"level\" : 3\r\n        }\r\n    },\r\n    {\r\n        \"type\" : \"list\",\r\n        \"data\" : {\r\n            \"style\" : \"unordered\",\r\n            \"items\" : [\r\n                \"It is a block-styled editor\",\r\n                \"It returns clean data output in JSON\",\r\n                \"Designed to be extendable and pluggable with a simple API\"\r\n            ]\r\n        }\r\n    },\r\n    {\r\n        \"type\" : \"header\",\r\n        \"data\" : {\r\n            \"text\" : \"What does it mean ¬´block-styled editor¬ª\",\r\n            \"level\" : 3\r\n        }\r\n    },\r\n    {\r\n        \"type\" : \"paragraph\",\r\n        \"data\" : {\r\n            \"text\" : \"Workspace in classic editors is made of a single contenteditable element, used to create different HTML markups. Editor.js <mark class=\\\"cdx-marker\\\">workspace consists of separate Blocks: paragraphs, headings, images, lists, quotes, etc</mark>. Each of them is an independent contenteditable element (or more complex structure) provided by Plugin and united by Editor's Core.\"\r\n        }\r\n    },\r\n    {\r\n        \"type\" : \"paragraph\",\r\n        \"data\" : {\r\n            \"text\" : \"There are dozens of <a href=\\\"https://github.com/editor-js\\\">ready-to-use Blocks</a> and the <a href=\\\"https://editorjs.io/creating-a-block-tool\\\">simple API</a> for creation any Block you need. For example, you can implement Blocks for Tweets, Instagram posts, surveys and polls, CTA-buttons and even games.\"\r\n        }\r\n    },\r\n    {\r\n        \"type\" : \"header\",\r\n        \"data\" : {\r\n            \"text\" : \"What does it mean clean data output\",\r\n            \"level\" : 3\r\n        }\r\n    },\r\n    {\r\n        \"type\" : \"paragraph\",\r\n        \"data\" : {\r\n            \"text\" : \"Classic WYSIWYG-editors produce raw HTML-markup with both content data and content appearance. On the contrary, Editor.js outputs JSON object with data of each Block. You can see an example below\"\r\n        }\r\n    },\r\n    {\r\n        \"type\" : \"paragraph\",\r\n        \"data\" : {\r\n            \"text\" : \"Given data can be used as you want: render with HTML for <code class=\\\"inline-code\\\">Web clients</code>, render natively for <code class=\\\"inline-code\\\">mobile apps</code>, create markup for <code class=\\\"inline-code\\\">Facebook Instant Articles</code> or <code class=\\\"inline-code\\\">Google AMP</code>, generate an <code class=\\\"inline-code\\\">audio version</code> and so on.\"\r\n        }\r\n    },\r\n    {\r\n        \"type\" : \"paragraph\",\r\n        \"data\" : {\r\n            \"text\" : \"Clean data is useful to sanitize, validate and process on the backend.\"\r\n        }\r\n    },\r\n    {\r\n        \"type\" : \"delimiter\",\r\n        \"data\" : {}\r\n    },\r\n    {\r\n        \"type\" : \"paragraph\",\r\n        \"data\" : {\r\n            \"text\" : \"We have been working on this project more than three years. Several large media projects help us to test and debug the Editor, to make it's core more stable. At the same time we significantly improved the API. Now, it can be used to create any plugin for any task. Hope you enjoy. üòè\"\r\n        }\r\n    },\r\n    {\r\n        \"type\" : \"image\",\r\n        \"data\" : {\r\n            \"file\" : {\r\n                \"url\" : \"https://codex.so/public/app/img/external/codex2x.png\"\r\n            },\r\n            \"caption\" : \"\",\r\n            \"withBorder\" : false,\r\n            \"stretched\" : false,\r\n            \"withBackground\" : false\r\n        }\r\n    }\r\n];","import React from 'react'\r\nimport { IHeader } from '../shared/IElement'\r\n\r\ninterface IProps {\r\n    readonly element: IHeader; \r\n}\r\n\r\nexport default function Header(props: IProps): JSX.Element {\r\n\r\n  const element = props.element;\r\n\r\n    switch (element.data.level) {\r\n        case 1:\r\n            return <h1>{element.data.text}</h1>;\r\n        case 2:\r\n            return <h2>{element.data.text}</h2>;\r\n        case 3:\r\n            return <h3>{element.data.text}</h3>;\r\n        case 4:\r\n            return <h4>{element.data.text}</h4>;\r\n        case 5:\r\n            return <h5>{element.data.text}</h5>;\r\n        case 6:\r\n            return <h6>{element.data.text}</h6>;            \r\n        default:\r\n            return <p>{element.data.text}</p>;\r\n    }\r\n\r\n}\r\n","import React from 'react'\r\nimport { IParagraph } from '../shared/IElement'\r\n\r\ninterface IProps {\r\n    readonly element: IParagraph; \r\n}\r\n\r\nexport default function Paragraph(props: IProps): JSX.Element {\r\n\r\n  const element = props.element;\r\n\r\n  return (\r\n    <p>{element.data.text}</p>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { IList } from '../shared/IElement'\r\n\r\ninterface IProps {\r\n    readonly element: IList; \r\n}\r\n\r\nexport default function List(props: IProps): JSX.Element {\r\n\r\n    const element = props.element;\r\n\r\n    switch (element.data.style) {\r\n        case \"ordered\":\r\n            return <ol>\r\n                {element.data.items.map((item, index) =>\r\n                 <li>{item}</li>\r\n                )}\r\n                </ol>;\r\n        case \"unordered\":\r\n            return <ul>\r\n                {element.data.items.map((item, index) =>\r\n                 <li>{item}</li>\r\n                )}\r\n                </ul>; \r\n        default:\r\n            return <ol></ol>;\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { IDelimiter } from '../shared/IElement'\r\n\r\ninterface IProps {\r\n    readonly element: IDelimiter; \r\n}\r\n\r\nexport default function Delimiter(props: IProps): JSX.Element {\r\n\r\n  return (\r\n    <p className=\"text-center\">**************</p>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { IImage } from '../shared/IElement'\r\n\r\ninterface IProps {\r\n    readonly element: IImage; \r\n}\r\n\r\nexport default function Image(props: IProps): JSX.Element {\r\n\r\n  const element = props.element;\r\n\r\n  return (\r\n    <img src={element.data.file.url} alt={element.data.caption}/>\r\n    \r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Element } from '../shared/IElement';\r\nimport Header from './Header';\r\nimport Paragraph from './Paragraph';\r\nimport List from './List';\r\nimport Delimiter from './Delimiter';\r\nimport Image from './Image';\r\n\r\ninterface IProps {\r\n    readonly element: Element;\r\n}\r\n\r\nexport default function ElementBuilder(props: IProps): JSX.Element {\r\n    const element = props.element;\r\n\r\n    switch (element.type) {\r\n      case \"paragraph\":\r\n        return <Paragraph element={element}/>\r\n      case \"header\":\r\n        return <Header element={element}/>   \r\n      case \"delimiter\":\r\n        return <Delimiter element={element}/>\r\n      case \"image\":\r\n        return <Image element={element}/>\r\n      case \"list\":\r\n        return <List element={element}/>\r\n\r\n      default:\r\n      return <div className=\"alert alert-warning\" role=\"alert\">\r\n                Unknown Element!\r\n            </div>\r\n\r\n    }\r\n\r\n}\r\n","import React from 'react';\r\nimport {elements} from './shared/elements'\r\nimport ElementBuilder from './components/ElementBuilder'\r\n\r\n/**\r\n * App JSX\r\n */\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <>\r\n        <header>\r\n            <img className=\"app-logo\" src=\"parser.jpg\" alt=\"Logo\"/>\r\n        </header>\r\n        <div className=\"container pt-2 pb-2\">          \r\n            <div className=\"page\">\r\n                {elements.map((element, index) =>\r\n                    <ElementBuilder key={index} element={element}/>\r\n                )}\r\n            </div>         \r\n\r\n        </div>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}